services:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${KC_DB_DATABASE}
      - POSTGRES_USER=${KC_DB_USERNAME}
      - POSTGRES_PASSWORD=${KC_DB_PASSWORD}
    networks:
      db-network:
        ipv4_address: 192.168.1.2
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${KC_DB_USERNAME} -d ${KC_DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:${KC_VERSION}
    container_name: keycloak
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_HOSTNAME_STRICT=${KC_HOSTNAME_STRICT}
      - KC_HOSTNAME_STRICT_HTTPS=${KC_HOSTNAME_STRICT_HTTPS}
      - KC_HOSTNAME_URL=${KC_HOSTNAME_URL}
      - KC_HTTP_RELATIVE_PATH=${KC_HTTP_RELATIVE_PATH}
      - KC_HTTP_ENABLED=${KC_HTTP_ENABLED}
      - KC_PROXY_HEADERS=${KC_PROXY_HEADERS}
      - KC_HEALTH_ENABLED=${KC_HEALTH_ENABLED}
      # --- PostgreSQL Configuration for Keycloak ---
      - KC_DB=${KC_DB}
      - KC_DB_URL_HOST=${KC_DB_URL_HOST}
      - KC_DB_URL_DATABASE=${KC_DB_DATABASE}
      - KC_DB_URL_PORT=${KC_DB_URL_PORT}
      - KC_DB_USERNAME=${KC_DB_USERNAME}
      - KC_DB_PASSWORD=${KC_DB_PASSWORD}
      - KC_DB_SCHEMA=${KC_DB_SCHEMA}
    command: start-dev
    networks:
      db-network:
        ipv4_address: 192.168.1.3
      backend-network:
        ipv4_address: 192.168.2.3
      frontend-network:
        ipv4_address: 192.168.3.3
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "exec 3<>/dev/tcp/127.0.0.1/9000;echo -e \"GET /auth/health/ready HTTP/1.1\r\nHost: localhost:9000\r\nConnection: close\r\n\r\n\" >&3;grep -q \"HTTP/1.1 200 OK\" <&3",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  backend:
    image: szybkisum/backend-image:latest
    container_name: backend
    ports:
      - "3001:3001"
    depends_on:
      keycloak:
        condition: service_healthy
    environment:
      - EXTERNAL_URL=${URL}
      - REALM_NAME=${REALM_NAME}
      - BACKEND_CLIENT_ID=${BACKEND_CLIENT_ID}
      - KEYCLOAK_INTERNAL_JWKS_URI=${KEYCLOAK_INTERNAL_JWKS_URI}
      - KEYCLOAK_ISSUER=${KEYCLOAK_ISSUER}
    networks:
      db-network:
        ipv4_address: 192.168.1.4
      backend-network:
        ipv4_address: 192.168.2.4
    healthcheck:
      test:
        [
          "CMD",
          "node",
          "-e",
          "require('http').get('http://localhost:3001/health')",
        ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  nextjs:
    image: szybkisum/nextjs-image:latest
    container_name: nextjs
    depends_on:
      keycloak:
        condition: service_healthy
      backend:
        condition: service_healthy
    secrets:
      - frontend-secret
    environment:
      - NEXTAUTH_URL=${URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - FRONTEND_CLIENT_ID=${FRONTEND_CLIENT_ID}
      - KEYCLOAK_CLIENT_SECRET_PATH=${KEYCLOAK_CLIENT_SECRET_PATH}
      - KEYCLOAK_ISSUER=${KEYCLOAK_ISSUER}
      - KEYCLOAK_FRONTEND_INTERNAL_URL=${KEYCLOAK_FRONTEND_INTERNAL_URL}
      - BACKEND_EXTERNAL_URL=${BACKEND_EXTERNAL_URL}
    networks:
      backend-network:
        ipv4_address: 192.168.2.5
      frontend-network:
        ipv4_address: 192.168.3.5
    healthcheck:
      test:
        ["CMD", "node", "-e", "require('http').get('http://localhost:3000')"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  nginx:
    image: szybkisum/nginx-image:latest
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      keycloak:
        condition: service_healthy
      nextjs:
        condition: service_healthy
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      frontend-network:
        ipv4_address: 192.168.3.6
    healthcheck:
      test: ["CMD", "curl", "-kf", "https://localhost:443"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

secrets:
  frontend-secret:
    file: ./secrets/frontend_secret.txt

volumes:
  postgres_data:

networks:
  db-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "192.168.1.0/24"
          gateway: "192.168.1.1"

  backend-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "192.168.2.0/24"
          gateway: "192.168.2.1"

  frontend-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: "192.168.3.0/24"
          gateway: "192.168.3.1"
